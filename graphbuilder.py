# libraries
import json
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from PIL import Image

# Boilerplate code for graph gen: https://python-graph-gallery.com/323-directed-or-undirected-network/

# helper to pull out the "root:" prefix from prov-json objects
def extractname(str):
    return str.split(":")[1]

# read the prov-json file, load into a workable json object
with open("output.json") as f:
  data = json.loads(f.read())
data = json.loads(data)

# pull out edge types, should be wasAssociatedWith, wasAttributedTo, wasDerivedFrom, wasGeneratedBy
print("edge types in this graph:")
edgetypes = []
for item in data:
    if (item.startswith("was")):
        print(item)
        edgetypes.append(item)

# objects appear in tuples, from:to as the child nodes of the edge type
fromlist = [];
tolist = [];
for edgetype in edgetypes:
    for item in data[edgetype]:
        fromlist.append(extractname(list(data[edgetype][item].values())[0]))
        tolist.append(extractname(list(data[edgetype][item].values())[1]))

df = pd.DataFrame({'from': fromlist, 'to': tolist})
df
G = nx.from_pandas_edgelist(df, 'from', 'to', create_using=nx.Graph())

# create a color map to apply to the nodes depending on their type
# QUOTE: blue
# AUTHOR: green
# ARTICLE: red
# SENTIMENT: purple
# UNKNOWN TYPE: black
# Source: https://stackoverflow.com/questions/27030473/how-to-set-colors-for-nodes-in-networkx-python
color_map = []
for node in G:
    if node.startswith('QUOTE'):
        color_map.append('blue')
    elif node.startswith('AUTHOR'):
        color_map.append('green')
    elif node.startswith('ARTICLE'):
        color_map.append('red')
    elif node.startswith('SENTIMENT'):
        color_map.append('purple')
    else:
        print ("UNKNOWN TYPE: "+node)
        color_map.append('black')

# color the edges by the type of relationship between them
# WASASSOCIATEDWITH: red
# WASATTRIBUTEDTO: blue
# WASDERIVEDFROM: green
# WASGENERATEDBY: yellow
# UNKNOWN EDGE TYPE: black
# this is hacky and relies on the assumption that a relationship is
# always between the same two types. probably rewrite this.
#
edge_color_map = []
for edge in G.edges():
    # sentiment was associated with quote
    if edge[0].startswith("SENT"):
        edge_color_map.append('red')
    # article was attributed to author
    elif edge[0].startswith("AUTH"):
        edge_color_map.append('blue')
    # article was derived from article
    elif edge[0].startswith("ARTI"):
        edge_color_map.append('green')
    # quote was generated by article
    elif edge[0].startswith("QUOT"):
        edge_color_map.append('yellow')
    else:
        print ("UNKNOWN EDGE TYPE" + str(edge))
        edge_color_map.append('black')

# map node names to shorter identifiers to make the graph more readable
# can take this out later if it turns out we don't care about the labels
# https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.relabel.relabel_nodes.html
def mapping(x):
    # need to differentiate between labels that start with the same letter
    if x.startswith("ARTICLE"):
        return "AR"+x.split()[1]
    elif x.startswith("AUTHOR"):
        return "AU"+x.split()[1]
    else: return x[0]+x.split()[1]

# H=nx.relabel_nodes(G,mapping)
# print(H.nodes())
# print(G.nodes())
# print(edge_color_map)
# print("NUMBER OF EDGES: " + str(len(H.edges())))# print ("SIZE OF COLOR MAP: " + str(len(edge_color_map)))
# Make the graph
# nx.draw(H, node_color = color_map, edge_color = edge_color_map, with_labels=True, node_size=500, alpha=0.5, arrows=True)
# https://networkx.github.io/documentation/networkx-1.7/reference/generated/networkx.convert.to_numpy_matrix.html
np.set_printoptions(threshold=np.nan)
matrix = nx.to_numpy_matrix(G, nodelist=None, dtype=None, order=None, weight='weight')
# print(matrix)
plt.title("UN-Directed")
plt.imshow(matrix, interpolation='nearest')
plt.show()
# plt.show()
